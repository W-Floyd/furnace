################################################################################
# Catalogue Functions
################################################################################

################################################################################
# XML Functions
################################################################################

################################################################################
#
# __get_range <FILE> <FIELD_NAME>
#
# Get Range
# Gets the range/s in a <FILE> between each set of <FIELD_NAME>.
#
# When piped version is used, FILE should be omitted.
#
# Example:
#
# __get_range catalogue.xml ITEM
#
# will print
#
# 2,10
# 11,19
# 20,28
# 31,39
#
################################################################################

__get_range() {
    grep -n '[</|<]'"${2}"'>' < "${1}" | sed 's/\:.*//' | sed 'N;s/\n/,/'
}

__get_range_piped() {
    cat | grep -n '[</|<]'"${1}"'>' | sed 's/\:.*//' | sed 'N;s/\n/,/'
}

################################################################################
#
# __read_range <FILE> <RANGE>
#
# Read Range
# Reads the <RANGE> from a <FILE>, as generated by __get_range.
# Must be single line input.
#
# When piped version is used, FILE should be omitted.
#
################################################################################

__read_range() {
    sed -e "${2}"'!d' -e 's/^[\t| ]*//' "${1}"
}

__read_range_piped() {
    cat | sed -e "${1}"'!d' -e 's/^[\t| ]*//'
}

################################################################################
#
# __get_value/s <DATASET> <FIELD_NAME1> <FIELD_NAME2> ...
#
# Get Value
# Gets the value/s of <FIELD_NAME> from <DATASET>.
# Meant to be used on separated data-sets.
#
# When piped version is used, DATASET should be omitted.
#
# When __get_values* is used, multiple field names may be specified.
#
################################################################################

__get_value() {
    pcregrep -M -o1 "<${2}>((\n|.)*)</${2}>" "${1}"
}

__get_value_piped() {
    cat | pcregrep -M -o1 "<${1}>((\n|.)*)</${1}>"
}

__get_values() {
    local __file="${1}"
    shift
    for __input in "${@}"; do
        pcregrep -M -o1 "<${1}>((\n|.)*)</${1}>" "${__file}"
        shift
    done
}

__get_values_piped() {
    local __pipe="$(cat)"
    for __input in "${@}"; do
        pcregrep -M -o1 "<${1}>((\n|.)*)</${1}>" <<< "${__pipe}"
        shift
    done
}

################################################################################
#
# __set_value <DATASET> <FIELD_NAME> <VALUE>
#
# Set Value
# Sets the <VALUE> of the specified <FIELD_NAME>.
#
# When piped version is used, VALUE should be omitted.
#
################################################################################

__set_value() {
    perl -i -pe "BEGIN{undef $/;} s#<${2}>.*</${2}>#<${2}>${3}</${2}>#sm" "${1}"
}

__set_value_piped() {
    perl -i -pe "BEGIN{undef $/;} s#<${2}>.*</${2}>#<${2}>$(cat)</${2}>#sm" "${1}"
}

################################################################################
#
# __test_field <DATASET> <FIELD>
#
# Test Field
# Tests for a field in a dataset. Returns 0 if it exists, 1 if it does not.
#
################################################################################

__test_field() {
    if grep -q "^<${2}>"; then
        return 0
    else
        return 1
    fi
}

################################################################################
#
# ... | __clean_pack
#
# Clean Pack
# From pipe, strips leading spaces and tabs, deletes lines that then start with
# a # after leaders have been stripped.
#
################################################################################

__clean_pack() {
    cat | sed -e 's/^[ |\t]*//' -e '/^#/d' | sed '/^$/d'
}
